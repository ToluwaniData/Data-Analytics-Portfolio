--- ASSIGNMENT 1: BASIC SELECT Queries

--- SHOW ALL CUSTOMERS FROM THE CUSTOMERS TABLE
SELECT * FROM CUSTOMER;

--- LIST THE FIRST AND LAST NAMES OF ALL CUSTOMERS
SELECT FIRST_NAME, LAST_NAME FROM CUSTOMER;

--- SHOW ALL FILMS WITH A RENTAL RATE LESS THAN 3 
SELECT * FROM FILM
WHERE RENTAL_RATE < 3;

--- SHOW THE TITLE AND RENTAL_RATE OF ALL FILMS RATED 'PG'
SELECT TITLE, RENTAL_RATE FROM FILM
WHERE RATING = 'PG';

--- LIST ALL FILMS RELEASED AFTER THE YEAR 2005
SELECT * FROM FILM
WHERE RELEASE_YEAR > 2005;




--- ASSIGNMENT 2: FILTERING WITH WHERE, AND, OR 

--- FIND ALL FILMS WHERE RENTAL_RATE IS 2 AND RATING IS 'PG-13'
SELECT * FROM FILM
WHERE RENTAL_RATE = 2 AND RATING = 'PG-13';

--- SHOW ALL CUSTOMERS LIVING IN STORE 1 OR WHO HAVE THE FIRST NAME 'MARY'
SELECT * FROM CUSTOMER
WHERE STORE_ID = 1 OR FIRST_NAME = 'Mary';


--- LIST ALL RENTALS WHERE THE RETURN DATE IS NULL (NOT YET RETURNED)
SELECT * FROM RENTAL
WHERE RETURN_DATE IS NULL;

--- SHOW ALL CUSTOMERS WHOSE FIRST NAME STARTS WITH 'J'
SELECT * FROM CUSTOMER
WHERE FIRST_NAME LIKE 'J%';




--- ASSIGNMENT 3: USING JOINS

--- LIST ALL CUSTOMERS AND THE TITLES OF THE MOVIES THEY HAVE RENTED
SELECT * FROM CUSTOMER;
SELECT * FROM RENTAL;
SELECT * FROM INVENTORY;
SELECT * FROM FILM;

--- CUSTOMERS_ID, FIRST_NAME, LAST_NAME, TITLES 
--- MERGE CUSTOMER AND RENTAL: COMMON COLUMN IS THE CUSTOMER_ID
--- MERGE RENTAL AND INVENTORY: COMMON COLUMN IS THE INVENTORY_ID
--- MERGE INVENTORY AND FILM: COMMON COLUMN IS THE FILM_ID
SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, FILM.TITLE AS FILM_TITLE
FROM CUSTOMER
LEFT JOIN RENTAL
ON CUSTOMER.CUSTOMER_ID = RENTAL.CUSTOMER_ID
LEFT JOIN INVENTORY
ON RENTAL.INVENTORY_ID = INVENTORY.INVENTORY_ID
LEFT JOIN FILM
ON INVENTORY.FILM_ID = FILM.FILM_ID;


--- SHOW THE NAME OF EACH FILM AND ITS CATEGORY
SELECT * FROM FILM;
SELECT * FROM FILM_CATEGORY;
SELECT * FROM CATEGORY;

--- FILM_ID, FILM_NAME, FILM.CATEGORY_ID
--- MERGE FILM AND FILM_CATEGORY: COMMON COLUMN IS THE FILM_ID
--- MERGE FILM_CATEGORY AND CATEGORY: COMMON COLUMN IS THE CATEGORY_ID
SELECT FILM.FILM_ID, FILM.TITLE AS FILM_NAME, NAME AS CATEGORY_NAME
FROM FILM
LEFT JOIN FILM_CATEGORY 
ON FILM.FILM_ID = FILM_CATEGORY.FILM_ID
LEFT JOIN CATEGORY
ON FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID;


--- FIND ALL CUSTOMERS WHO RENTED A MOVIE FROM STORE 2
SELECT * FROM CUSTOMER;
SELECT * FROM RENTAL;
SELECT * FROM INVENTORY;

--- CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, INVENTORY.STORE_ID 2
--- MERGE CUSTOMER AND RENTAL: COMMON COLUMN IS CUSTOMER_ID
--- MERGE INVENTORY AND RENTAL: COMMON COLUMN IS INVENTORY_ID
SELECT DISTINCT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME
FROM CUSTOMER
INNER JOIN RENTAL
ON CUSTOMER.CUSTOMER_ID = RENTAL.CUSTOMER_ID
INNER JOIN INVENTORY
ON RENTAL.INVENTORY_ID = INVENTORY.INVENTORY_ID
WHERE INVENTORY.STORE_ID = 2;




--- ASSIGNMENT 4: AGGREGATE FUNCTIONS (SUM, COUNT, AVG)

--- HOW MANY MOVIES ARE THERE IN THE STORE
SELECT COUNT(*) AS TOTAL_MOVIES
FROM FILM;


--- COUNT HOW MANY RENTALS EACH CUSTOMERS HAS MADE 
SELECT CUSTOMER_ID , COUNT (*) AS TOTAL_RENTAL 
FROM RENTAL
GROUP BY CUSTOMER_ID;


--- WHAT IS THE AVERAGE RENTAL RATE OF ALL MOVIES
SELECT AVG(RENTAL_RATE) 
FROM FILM;


--- LIST THE TOP 5 MOST RENTED FILMS (BY NUMBER OF TIMES RENTED)
SELECT * FROM FILM;
SELECT * FROM INVENTORY;
SELECT * FROM RENTAL;

--- FILM_ID, TITLE, NUMBER OF TIMES RENTED
--- MERGE FILM AND INVENTORY: THE COMMON COLUMN IS FILM_ID
--- MERGE INVENTORY AND RENTAL: THE COMMON COLUMN IS INVENTORY_ID
--- INNER JOIN
--- USE COUNT () TO COUNT HOW MANY TIMES EACH FILM WAS RENTED
--- GROUP BY FILM.TITLE
--- ORDER BY COUNT DESC
--- LIMIT TO TOP 5
SELECT FILM.FILM_ID, FILM.TITLE, COUNT(*) AS NUMBER_OF_TIMES_RENTED
FROM FILM
INNER JOIN INVENTORY
ON FILM.FILM_ID = INVENTORY.FILM_ID
INNER JOIN RENTAL
ON INVENTORY.INVENTORY_ID = RENTAL.INVENTORY_ID
GROUP BY FILM.FILM_ID, FILM.TITLE
ORDER BY NUMBER_OF_TIMES_RENTED DESC
LIMIT 5;






--- BONUS CHALLENGE (MINI PROJECT)

--- LIST ALL CUSTOMERS WHO HAVEN'T RETURNED A MOVIE YET
SELECT * FROM CUSTOMER;
SELECT * FROM RENTAL;

--- CUSTOMERS.CUSTOMERS_ID, CUSTOMERS.FIRST_NAME, CUSTOMERS.LAST_NAME, RENTALS_DATE
--- MERGE CUSTOMER AND RENTAL: THE COMMON COLUMN IS CUSTOMER_ID
SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, RENTAL.RETURN_DATE
FROM CUSTOMER
INNER JOIN RENTAL
ON CUSTOMER.CUSTOMER_ID = RENTAL.CUSTOMER_ID
WHERE RENTAL.RETURN_DATE IS NULL;


--- LIST THE TOP 3 CATEGORIES WITH THE MOST MOVIES
SELECT * FROM CATEGORY;
SELECT * FROM FILM_CATEGORY;

--- CATEGORY_ID, CATEGORY_NAME, TOTAL_NUMBER_OF_MOVIES
--- MERGE CATEGORY AND FILM_CATEGORY: COLMMON COLUMN IS CUSTOMER_ID
SELECT CATEGORY.CATEGORY_ID, CATEGORY.NAME AS CATEGORY_NAME, COUNT(FILM_CATEGORY.FILM_ID) AS TOTAL_NUMBER_OF_MOVIE
FROM CATEGORY
INNER JOIN FILM_CATEGORY
ON CATEGORY.CATEGORY_ID = FILM_CATEGORY.CATEGORY_ID
GROUP BY CATEGORY.CATEGORY_ID, CATEGORY_NAME
ORDER BY TOTAL_NUMBER_OF_MOVIE DESC
LIMIT 3;


--- FIND THE CUSTOMER WHO RENTED THE MOST MOVIES
SELECT * FROM CUSTOMER;
SELECT * FROM RENTAL;

--- CUSTOMER_ID, FIRST_NAME, LAST_NAME,Find the customer who rented the most movies.  TOTAL_RENTALS
--- MERGE CUSTOMER WITH RENTAL: THE COMMON COLUMN IS CUSTOMER_ID
--- COUNT THE NUMBER OF RENTALS PER CUSTOMERS
--- ORDER BY TOTAL_RENTALS DECENDING
--- LIMIT TO 1 TO GET THE TOP CUSTOMER
SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, COUNT(*) AS TOTAL_RENTALS
FROM CUSTOMER
INNER JOIN RENTAL
ON CUSTOMER.CUSTOMER_ID = RENTAL.CUSTOMER_ID
GROUP BY CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME
ORDER BY TOTAL_RENTALS DESC
LIMIT 1;


--- TOTAL NUMBER OF RENTALS DONE IN THE LAST 30 DAYS
FROM RENTAL TABLE;

--- FILTER RENTAL_DATE TO INCLUDE ONLY THE LAST 30 DAYS
--- COUNT THE NUMBER OF RENTALS
SELECT COUNT(*) AS TOTAL_NUMBER_OF_RENTALS
FROM RENTAL
WHERE RENTAL_DATE >= CURRENT_DATE - INTERVAL '30 DAYS';


